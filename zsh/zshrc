## Variable definitions
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=10000

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export DISABLE_AUTO_UPDATE=true

export EDITOR='/usr/bin/vim'

export LANG=en_US.UTF-8

# reduce vi-key escape timeout
export KEYTIMEOUT=1

# less config
highlight_cmd='/usr/local/bin/highlight'
if [[ -d '/opt/homebrew' ]]; then
	highlight_cmd='/opt/homebrew/bin/highlight'
fi
if [[ -x $highlight_cmd ]]
then
	export LESSOPEN="| $highlight_cmd --force --quiet --out-format=truecolor --style=base16/monokai %s"
fi

## / end of variables

# zgen - zsh plugin manager and init file generator
source $HOME/dotfiles/zsh/zgen/zgen.zsh

# check if there's no init script
if ! zgen saved; then
	echo "Creating a zgen save"

	zgen oh-my-zsh

	## NOTE: after modifying this list of plugins, run "zgen update",
	## and then restart your zsh shell twice: first one executes this block
	## of code, second one initializes zsh properly.

	# plugins
	zgen oh-my-zsh plugins/shrink-path
	zgen oh-my-zsh plugins/git
	zgen oh-my-zsh plugins/brew
	zgen oh-my-zsh plugins/sudo
	zgen oh-my-zsh plugins/symfony2
	zgen load zsh-users/zsh-history-substring-search

	# completions
	zgen load zsh-users/zsh-completions src

	# save all to init script
	zgen save
fi

setopt appendhistory extendedglob
unsetopt autocd beep nomatch notify
bindkey -v
zstyle :compinstall filename "$HOME/.zshrc"

autoload -Uz compinit && compinit

# bash-style word separators
autoload -U select-word-style
select-word-style bash

# bind UP and DOWN arrow keys, bind k and j for VI mode
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

## Keyboard shortcuts
# backspace
bindkey "^?" backward-delete-char
# ctrl+h
bindkey "^H" backward-delete-char
# ctrl+w
bindkey "^W" backward-kill-word
# ctrl+u
bindkey "^U" backward-kill-line
# home
bindkey "${terminfo[khome]}" beginning-of-line
# end
bindkey "${terminfo[kend]}" end-of-line

# numpad enter...
bindkey -s "^[OM" "^M"

autoload -U colors
colors
# prompt
# "%{$fg_bold[green]%}%m %{$fg_bold[white]%}%~ %(0?.$fg_bold[green].$fg_bold[red])%?$reset_color %{$fg_bold[yellow]%}%(\!.#.%%) $reset_color"
rst="%{$reset_color%}"

# regular fg colors
fbk="%{$fg[black]%}"
fre="%{$fg[red]%}"
fgr="%{$fg[green]%}"
fye="%{$fg[yellow]%}"
fbl="%{$fg[blue]%}"
fma="%{$fg[magenta]%}"
fcy="%{$fg[cyan]%}"
fwh="%{$fg[white]%}"

# bold (bright) fg colors

fbbk="%{$fg_bold[black]%}"
fbre="%{$fg_bold[red]%}"
fbgr="%{$fg_bold[green]%}"
fbye="%{$fg_bold[yellow]%}"
fbbl="%{$fg_bold[blue]%}"
fbma="%{$fg_bold[magenta]%}"
fbcy="%{$fg_bold[cyan]%}"
fbwh="%{$fg_bold[white]%}"

bbk="%{$bg[black]%}"

prompt=""
# hostname
#backup with bright colors!
#prompt+="%(0#,$fbre,$fbgr)%n$fbgr@%m$rst "
prompt+="%(0#,$fre,$fgr)%n$fgr@%m$rst "

# path
setopt prompt_subst
#prompt+="$fbbl%3~$rst "
prompt+="$fcy\$(shrink_path -t -l)$rst "

# exit code of last command
#prompt+="%(0?,,$fbre%?$rst )"
#prompt+="%(0?,,$fre%?$rst )"

# git branch info, format the vcs_info_msg_0_ variable
# load vcs info plugin
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats "($fgr%b$rst) "
prompt+="\$vcs_info_msg_0_"

# prompt symbol
#prompt+="%(!.$fbcy#.$fbye%%)$rst "
prompt+="%(!.$fre#.$fma%%)$rst "

export PROMPT


#export RPROMPT=\$vcs_info_msg_0_

## OS-specific configuration and overrides
if [[ `uname` == 'Linux' ]]
then
	export LINUX=1
	ZSH_LINUX=$HOME/.zshrc.linux.zsh
	if [[ -f $ZSH_LINUX ]]
	then
		source $ZSH_LINUX
	fi
else
	export LINUX=
fi

if [[ `uname` == 'Darwin' ]]
then
	export OSX=1
	ZSH_OSX=$HOME/.zshrc.osx.zsh
	if [[ -f $ZSH_OSX ]]
	then
		source $ZSH_OSX
	fi
else
	export OSX=
fi

alias tcol256="terminal-colors --cube-slice --numbers --padding"
alias grrep="grep -i -r"
alias bomfind="grep -rlI $'\xEF\xBB\xBF'"

if [[ -f /usr/local/opt/asdf/libexec/asdf.sh ]]; then
    . /usr/local/opt/asdf/libexec/asdf.sh
elif [[ -f /opt/homebrew/opt/asdf/libexec/asdf.sh ]]; then
    . /opt/homebrew/opt/asdf/libexec/asdf.sh
fi
